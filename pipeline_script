pipeline {
    agent any
    environment {
        MASTER_NODE = 'master-node-ip'
        WORKER_NODES = 'worker1-ip worker2-ip'
        USER = 'ubuntu'
    }
    stages {
        stage('Install Kubernetes on Master') {
            steps {
                sshagent(['jenkins-ssh-key']) {
                    sh '''
                    ssh $USER@$MASTER_NODE <<EOF
                        sudo apt-get update -y
                        sudo apt-get install -y apt-transport-https curl
                        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
                        echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
                        sudo apt-get update -y
                        sudo apt-get install -y kubelet kubeadm kubectl
                        sudo kubeadm init --pod-network-cidr=192.168.0.0/16
                        mkdir -p $HOME/.kube
                        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
                        sudo chown $(id -u):$(id -g) $HOME/.kube/config
                        kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
                    EOF
                    '''
                }
            }
        }

        stage('Install Kubernetes on Workers') {
            steps {
                sshagent(['jenkins-ssh-key']) {
                    script {
                        WORKER_NODES.split().each { node ->
                            sh """
                            ssh $USER@$node <<EOF
                                sudo apt-get update -y
                                sudo apt-get install -y apt-transport-https curl
                                curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
                                echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
                                sudo apt-get update -y
                                sudo apt-get install -y kubelet kubeadm kubectl
                            EOF
                            """
                        }
                    }
                }
            }
        }

        stage('Join Worker Nodes to Cluster') {
            steps {
                sshagent(['jenkins-ssh-key']) {
                    script {
                        def joinCommand = sh(script: "ssh $USER@$MASTER_NODE 'kubeadm token create --print-join-command'", returnStdout: true).trim()
                        WORKER_NODES.split().each { node ->
                            sh """
                            ssh $USER@$node <<EOF
                                sudo ${joinCommand}
                            EOF
                            """
                        }
                    }
                }
            }
        }

        stage('Verify Cluster') {
            steps {
                sshagent(['jenkins-ssh-key']) {
                    sh '''
                    ssh $USER@$MASTER_NODE <<EOF
                        kubectl get nodes
                    EOF
                    '''
                }
            }
        }
    }
    post {
        success {
            echo 'Kubernetes cluster and workers are successfully installed and configured!'
        }
        failure {
            echo 'There was an error during Kubernetes installation.'
        }
    }
}



