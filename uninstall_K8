

It sounds like you need to reinstall Kubernetes on your cluster. To uninstall and reinstall Kubernetes on both the master and worker nodes, you can follow these general steps.

### 1. **Uninstall Kubernetes**

First, you need to remove Kubernetes components from both the master and worker nodes. Here's how to do that:

#### On both the master and worker nodes:

1. **Stop and disable kubelet service:**
   ```bash
   sudo systemctl stop kubelet
   sudo systemctl disable kubelet
   ```

2. **Remove Kubernetes packages:**
   Depending on how Kubernetes was installed (e.g., via `apt`, `yum`, or `kubeadm`), you can remove the packages:

   - For Debian/Ubuntu:
     ```bash
     sudo apt-get purge -y kubeadm kubectl kubelet kubernetes-cni kube*
     ```

   - For CentOS/RHEL:
     ```bash
     sudo yum remove -y kubeadm kubectl kubelet kubernetes-cni kube*
     ```

3. **Remove Kubernetes configuration files:**
   ```bash
   sudo rm -rf ~/.kube
   sudo rm -rf /etc/kubernetes
   sudo rm -rf /var/lib/etcd
   ```

4. **Remove network CNI plugin if installed:**
   If you were using a CNI plugin like Calico, Weave, or Flannel, remove its files as well. For example:
   ```bash
   sudo rm -rf /opt/cni/bin
   ```

5. **Reset iptables and ipvs settings:**
   ```bash
   sudo iptables -F
   sudo ipvsadm -C
   ```

6. **Reboot the nodes:**
   After uninstalling Kubernetes, reboot the nodes to make sure everything is cleared out.
   ```bash
   sudo reboot
   ```

### 2. **Reinstall Kubernetes**

After uninstalling Kubernetes, you can proceed to install it again.

#### 1. **Install Kubernetes dependencies:**

On both the master and worker nodes, install the necessary dependencies:

- **For Debian/Ubuntu:**
  ```bash
  sudo apt-get update
  sudo apt-get install -y apt-transport-https curl
  sudo curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
  sudo bash -c 'echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list'
  sudo apt-get update
  ```

- **For CentOS/RHEL:**
  ```bash
  sudo cat <<EOF > /etc/yum.repos.d/kubernetes.repo
  [kubernetes]
  name=Kubernetes
  baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
  enabled=1
  gpgcheck=1
  gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
  EOF
  sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
  ```

#### 2. **Install kubelet, kubeadm, and kubectl:**

- **For Debian/Ubuntu:**
  ```bash
  sudo apt-get install -y kubelet kubeadm kubectl
  ```

- **For CentOS/RHEL:**
  ```bash
  sudo yum install -y kubelet kubeadm kubectl
  ```

#### 3. **Enable and start the kubelet service:**
```bash
sudo systemctl enable kubelet
sudo systemctl start kubelet
```

#### 4. **Initialize Kubernetes master node (only on master):**

On the master node, initialize the Kubernetes cluster:

```bash
sudo kubeadm init --pod-network-cidr=10.244.0.0/16
```

You can customize the `--pod-network-cidr` flag if you are using a different network plugin (like Calico, Flannel, etc.).

After the `kubeadm init` command finishes, you will see a command that you'll need to run on the worker nodes to join them to the cluster. It will look something like this:

```bash
kubeadm join <MASTER-IP>:6443 --token <TOKEN> --discovery-token-ca-cert-hash sha256:<HASH>
```

#### 5. **Set up kubeconfig for the master node:**
Run the following commands on the master node to set up the kubeconfig file for `kubectl` access:

```bash
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
```

#### 6. **Install a network plugin (e.g., Flannel):**

Kubernetes requires a network plugin to allow pod-to-pod communication. Install a network plugin, such as Flannel:

```bash
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
```

You can replace this with the network plugin of your choice (e.g., Calico, Weave).

#### 7. **Join the worker nodes:**

Run the `kubeadm join` command from the output of `kubeadm init` on the worker node to join it to the cluster.

#### 8. **Verify the installation:**

After the worker nodes join, check the status of your nodes using:

```bash
kubectl get nodes
```

This should show your master and worker nodes in the `Ready` state.

#### 9. **Check if port 6443 is open:**

Ensure that port 6443 (the Kubernetes API server port) is open and accessible. You may need to check your firewall or security group settings to allow traffic on this port.

---

After following these steps, your Kubernetes cluster should be reinstalled and running. Let me know if you face any issues during the process!
